import { useState, useEffect } from 'react'
import { generateDailyReport, generateWeeklyReport, generateMonthlyReport, getReports, deleteReport } from '../services/reports'
import { formatCurrency, formatDate } from '../utils/format'
import toast from 'react-hot-toast'
import { useIsAdmin } from '../firebase/admin'
import { useAuthState } from '../firebase/auth'
import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable'
import * as XLSX from 'xlsx'

export default function Reports() {
  const { isAdmin } = useIsAdmin()
  const { user } = useAuthState()
  const [reports, setReports] = useState([])
  const [loading, setLoading] = useState(true)
  const [generating, setGenerating] = useState(false)
  const [selectedReport, setSelectedReport] = useState(null)

  useEffect(() => {
    loadReports()
  }, [])

  async function loadReports() {
    setLoading(true)
    try {
      const data = await getReports()
      setReports(data)
    } catch (error) {
      toast.error('Failed to load reports')
    } finally {
      setLoading(false)
    }
  }

  async function handleGenerateReport(type) {
    if (!isAdmin) {
      toast.error('Only admins can generate reports')
      return
    }

    setGenerating(true)
    const loadingToast = toast.loading(`Generating ${type} report...`)

    try {
      let report
      if (type === 'daily') {
        report = await generateDailyReport()
      } else if (type === 'weekly') {
        report = await generateWeeklyReport()
      } else if (type === 'monthly') {
        report = await generateMonthlyReport()
      }

      toast.success(`${type.charAt(0).toUpperCase() + type.slice(1)} report generated!`, { id: loadingToast })
      loadReports()
      setSelectedReport(report)
    } catch (error) {
      toast.error('Failed to generate report: ' + error.message, { id: loadingToast })
    } finally {
      setGenerating(false)
    }
  }

  const exportReportToPDF = (report) => {
    const doc = new jsPDF()
    const pageWidth = doc.internal.pageSize.width
    const pageHeight = doc.internal.pageSize.height
    
    // Header Background
    doc.setFillColor(79, 70, 229) // Indigo
    doc.rect(0, 0, pageWidth, 50, 'F')
    
    // Portal Logo/Name
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(28)
    doc.setFont('helvetica', 'bold')
    doc.text('CMS Pro', 14, 22)
    
    doc.setFontSize(11)
    doc.setFont('helvetica', 'normal')
    doc.text('Customer Management System', 14, 30)
    
    // Report Title
    doc.setFontSize(18)
    doc.setFont('helvetica', 'bold')
    const reportTitle = `${report.reportType.charAt(0).toUpperCase() + report.reportType.slice(1)} Report`
    doc.text(reportTitle, 14, 42)
    
    // Admin & Date Info (Right aligned)
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    const adminText = `Generated by: ${user?.email || 'Admin'}`
    const dateText = `Date: ${new Date().toLocaleDateString('en-IN', { 
      day: '2-digit', 
      month: 'short', 
      year: 'numeric' 
    })}`
    const timeText = `Time: ${new Date().toLocaleTimeString('en-IN', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    })}`
    
    doc.text(adminText, pageWidth - 14, 16, { align: 'right' })
    doc.text(dateText, pageWidth - 14, 22, { align: 'right' })
    doc.text(timeText, pageWidth - 14, 28, { align: 'right' })
    
    // Report ID Badge
    doc.setFillColor(249, 250, 251)
    doc.roundedRect(pageWidth - 75, 35, 61, 9, 2, 2, 'F')
    doc.setTextColor(79, 70, 229)
    doc.setFontSize(10)
    doc.setFont('helvetica', 'bold')
    doc.text(report.reportId, pageWidth - 44.5, 40.5, { align: 'center' })
    
    // Reset text color
    doc.setTextColor(0, 0, 0)
    
    // Summary Cards Section
    let yPos = 60
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.text('Summary Statistics', 14, yPos)
    
    yPos += 10
    const cardWidth = (pageWidth - 35) / 4
    const cardHeight = 28
    const cardSpacing = 3
    
    const summaryData = [
      { 
        label: 'Total Customers', 
        value: (report.summary?.totalCustomers || 0).toString(),
        color: [79, 70, 229] // Indigo
      },
      { 
        label: 'Total Credit (Owed)', 
        value: formatCurrency(report.summary?.totalCredit || 0),
        color: [239, 68, 68] // Red - Customer owes
      },
      { 
        label: 'Total Debit (Paid)', 
        value: formatCurrency(report.summary?.totalDebit || 0),
        color: [34, 197, 94] // Green - Payment received
      },
      { 
        label: 'Balance', 
        value: formatCurrency(report.summary?.totalBalance || 0),
        color: [168, 85, 247] // Purple
      }
    ]
    
    summaryData.forEach((item, index) => {
      const xPos = 14 + (index * (cardWidth + cardSpacing))
      
      // Card background
      doc.setFillColor(249, 250, 251)
      doc.roundedRect(xPos, yPos, cardWidth, cardHeight, 2, 2, 'F')
      
      // Card border
      doc.setDrawColor(...item.color)
      doc.setLineWidth(0.5)
      doc.roundedRect(xPos, yPos, cardWidth, cardHeight, 2, 2, 'S')
      
      // Label
      doc.setFontSize(7.5)
      doc.setFont('helvetica', 'normal')
      doc.setTextColor(107, 114, 128)
      doc.text(item.label, xPos + cardWidth/2, yPos + 10, { align: 'center' })
      
      // Value
      doc.setFontSize(11)
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(...item.color)
      doc.text(item.value, xPos + cardWidth/2, yPos + 20, { align: 'center' })
    })
    
    // Reset colors
    doc.setTextColor(0, 0, 0)
    doc.setDrawColor(0, 0, 0)
    
    // Top Customers Table
    yPos += cardHeight + 18
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('Top Customers by Balance', 14, yPos)
    
    yPos += 5
    if (report.topCustomers && report.topCustomers.length > 0) {
      autoTable(doc, {
        startY: yPos,
        head: [['Rank', 'Customer ID', 'Name', 'Credit', 'Debit', 'Balance']],
        body: report.topCustomers.map((c, idx) => [
          `#${idx + 1}`,
          c.customerId,
          c.name,
          formatCurrency(c.totalCredit),
          formatCurrency(c.totalDebit),
          formatCurrency(c.balance)
        ]),
        headStyles: {
          fillColor: [79, 70, 229],
          textColor: [255, 255, 255],
          fontSize: 9,
          fontStyle: 'bold',
          halign: 'center'
        },
        bodyStyles: {
          fontSize: 8,
          textColor: [31, 41, 55]
        },
        alternateRowStyles: {
          fillColor: [249, 250, 251]
        },
        columnStyles: {
          0: { halign: 'center', cellWidth: 15 },
          1: { halign: 'left', cellWidth: 28 },
          2: { halign: 'left', cellWidth: 45 },
          3: { halign: 'right', cellWidth: 28 },
          4: { halign: 'right', cellWidth: 28 },
          5: { halign: 'right', cellWidth: 28 }
        },
        margin: { left: 14, right: 14 }
      })
      
      yPos = doc.lastAutoTable.finalY + 15
    }
    
    // Village Statistics Table
    if (report.villageStats && Object.keys(report.villageStats).length > 0 && yPos < pageHeight - 80) {
      doc.setFontSize(14)
      doc.setFont('helvetica', 'bold')
      doc.text('Village-wise Statistics', 14, yPos)
      
      yPos += 5
      const villageData = Object.entries(report.villageStats).map(([village, stats]) => [
        village,
        stats.customerCount,
        formatCurrency(stats.totalCredit),
        formatCurrency(stats.totalDebit),
        formatCurrency(stats.totalBalance),
        formatCurrency(stats.totalDebit) // Amount Received (Debit)
      ])
      
      autoTable(doc, {
        startY: yPos,
        head: [['Village', 'Customers', 'Credit (Owed)', 'Debit (Paid)', 'Balance', 'Amount Received']],
        body: villageData,
        headStyles: {
          fillColor: [79, 70, 229],
          textColor: [255, 255, 255],
          fontSize: 9,
          fontStyle: 'bold',
          halign: 'center'
        },
        bodyStyles: {
          fontSize: 8,
          textColor: [31, 41, 55]
        },
        alternateRowStyles: {
          fillColor: [249, 250, 251]
        },
        columnStyles: {
          0: { halign: 'left', cellWidth: 30 },
          1: { halign: 'center', cellWidth: 20 },
          2: { halign: 'right', cellWidth: 30 },
          3: { halign: 'right', cellWidth: 30 },
          4: { halign: 'right', cellWidth: 25 },
          5: { halign: 'right', cellWidth: 30, fillColor: [220, 252, 231] } // Light green for amount received
        },
        margin: { left: 14, right: 14 }
      })
    }
    
    // Footer
    const finalY = doc.lastAutoTable?.finalY || yPos + 50
    if (finalY < pageHeight - 30) {
      doc.setFillColor(249, 250, 251)
      doc.rect(0, pageHeight - 25, pageWidth, 25, 'F')
      
      doc.setFontSize(8)
      doc.setTextColor(107, 114, 128)
      doc.setFont('helvetica', 'italic')
      doc.text('Generated by CMS Pro - Customer Management System', pageWidth/2, pageHeight - 15, { align: 'center' })
      doc.text(`Report ID: ${report.reportId} | Period: ${new Date(report.startDate).toLocaleDateString()} - ${new Date(report.endDate).toLocaleDateString()}`, pageWidth/2, pageHeight - 10, { align: 'center' })
      doc.text('This is a computer-generated document. No signature required.', pageWidth/2, pageHeight - 5, { align: 'center' })
    }
    
    // Save PDF
    const fileName = `${report.reportType}_Report_${report.reportId}_${Date.now()}.pdf`
    doc.save(fileName)
    toast.success('Professional PDF downloaded!')
  }

  const exportReportToExcel = (report) => {
    const wb = XLSX.utils.book_new()
    
    // Summary Sheet
    const summaryData = [
      ['CMS Pro - Customer Management System'],
      [`${report.reportType.toUpperCase()} REPORT`],
      [''],
      ['Report ID:', report.reportId],
      ['Generated:', new Date().toLocaleString('en-IN')],
      ['Period:', `${new Date(report.startDate).toLocaleDateString()} - ${new Date(report.endDate).toLocaleDateString()}`],
      [''],
      ['SUMMARY STATISTICS'],
      ['Total Customers', report.summary?.totalCustomers || 0],
      ['Total Credit', report.summary?.totalCredit || 0],
      ['Total Debit', report.summary?.totalDebit || 0],
      ['Total Balance', report.summary?.totalBalance || 0],
    ]
    const summaryWs = XLSX.utils.aoa_to_sheet(summaryData)
    XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary')
    
    // Top Customers Sheet
    if (report.topCustomers && report.topCustomers.length > 0) {
      const topCustomersWs = XLSX.utils.json_to_sheet(report.topCustomers)
      XLSX.utils.book_append_sheet(wb, topCustomersWs, 'Top Customers')
    }
    
    // Village Stats Sheet
    if (report.villageStats && Object.keys(report.villageStats).length > 0) {
      const villageData = Object.entries(report.villageStats).map(([village, stats]) => ({
        Village: village,
        Customers: stats.customerCount,
        'Total Credit': stats.totalCredit,
        'Total Debit': stats.totalDebit,
        Balance: stats.totalBalance
      }))
      const villageWs = XLSX.utils.json_to_sheet(villageData)
      XLSX.utils.book_append_sheet(wb, villageWs, 'Village Stats')
    }
    
    XLSX.writeFile(wb, `${report.reportType}_Report_${report.reportId}.xlsx`)
    toast.success('Excel file downloaded!')
  }

  const handleDeleteReport = async (reportId) => {
    if (!isAdmin) {
      toast.error('Only admins can delete reports')
      return
    }

    if (!confirm('Are you sure you want to delete this report? This action cannot be undone.')) {
      return
    }

    const loadingToast = toast.loading('Deleting report...')
    try {
      await deleteReport(reportId)
      toast.success('Report deleted successfully!', { id: loadingToast })
      setSelectedReport(null)
      loadReports()
    } catch (error) {
      toast.error('Failed to delete report: ' + error.message, { id: loadingToast })
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Reports</h1>
        <p className="text-gray-600 mt-1">Auto-generated business reports and analytics</p>
      </div>

      {/* Generate Reports */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">Generate New Report</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button
            onClick={() => handleGenerateReport('daily')}
            disabled={generating || !isAdmin}
            className="p-6 border-2 border-blue-200 rounded-xl hover:border-blue-500 hover:bg-blue-50 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <div className="text-4xl mb-2">📅</div>
            <div className="font-semibold text-gray-900">Daily Report</div>
            <div className="text-sm text-gray-600 mt-1">Today's summary</div>
          </button>

          <button
            onClick={() => handleGenerateReport('weekly')}
            disabled={generating || !isAdmin}
            className="p-6 border-2 border-green-200 rounded-xl hover:border-green-500 hover:bg-green-50 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <div className="text-4xl mb-2">📊</div>
            <div className="font-semibold text-gray-900">Weekly Report</div>
            <div className="text-sm text-gray-600 mt-1">This week's summary</div>
          </button>

          <button
            onClick={() => handleGenerateReport('monthly')}
            disabled={generating || !isAdmin}
            className="p-6 border-2 border-purple-200 rounded-xl hover:border-purple-500 hover:bg-purple-50 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <div className="text-4xl mb-2">📈</div>
            <div className="font-semibold text-gray-900">Monthly Report</div>
            <div className="text-sm text-gray-600 mt-1">This month's summary</div>
          </button>
        </div>
      </div>

      {/* Reports List */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">Generated Reports</h2>
        </div>

        {loading ? (
          <div className="p-12 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          </div>
        ) : reports.length === 0 ? (
          <div className="p-12 text-center">
            <svg className="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <p className="text-gray-600 font-medium">No reports generated yet</p>
            <p className="text-sm text-gray-500 mt-1">Click a button above to generate your first report</p>
          </div>
        ) : (
          <div className="divide-y divide-gray-200">
            {reports.map(report => (
              <div
                key={report.id}
                className="p-6 hover:bg-gray-50 cursor-pointer transition-colors"
                onClick={() => setSelectedReport(report)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
                      report.reportType === 'daily' ? 'bg-blue-100 text-blue-600' :
                      report.reportType === 'weekly' ? 'bg-green-100 text-green-600' :
                      'bg-purple-100 text-purple-600'
                    }`}>
                      {report.reportType === 'daily' ? '📅' : report.reportType === 'weekly' ? '📊' : '📈'}
                    </div>
                    <div>
                      <div className="font-semibold text-gray-900">{report.reportId}</div>
                      <div className="text-sm text-gray-600 capitalize">{report.reportType} Report</div>
                      <div className="text-xs text-gray-500 mt-1">
                        Generated: {formatDate(report.generatedAt)}
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-2xl font-bold text-blue-600">
                      {formatCurrency(report.summary?.totalBalance || 0)}
                    </div>
                    <div className="text-xs text-gray-500">Total Balance</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Report Details Modal */}
      {selectedReport && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            {/* Header */}
            <div className="sticky top-0 bg-white border-b border-gray-200 px-6 py-4">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h2 className="text-xl font-bold text-gray-900">{selectedReport.reportId}</h2>
                  <p className="text-sm text-gray-600 capitalize">{selectedReport.reportType} Report</p>
                </div>
                <button
                  onClick={() => setSelectedReport(null)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              {/* Export Buttons */}
              <div className="flex gap-3">
                <button
                  onClick={() => exportReportToPDF(selectedReport)}
                  className="flex-1 px-4 py-2.5 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-all shadow-md hover:shadow-lg flex items-center justify-center gap-2 font-semibold"
                >
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clipRule="evenodd" />
                  </svg>
                  Export PDF
                </button>
                <button
                  onClick={() => exportReportToExcel(selectedReport)}
                  className="flex-1 px-4 py-2.5 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-all shadow-md hover:shadow-lg flex items-center justify-center gap-2 font-semibold"
                >
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9 2a2 2 0 00-2 2v8a2 2 0 002 2h6a2 2 0 002-2V6.414A2 2 0 0016.414 5L14 2.586A2 2 0 0012.586 2H9z" />
                    <path d="M3 8a2 2 0 012-2v10h8a2 2 0 01-2 2H5a2 2 0 01-2-2V8z" />
                  </svg>
                  Export Excel
                </button>
                {isAdmin && (
                  <button
                    onClick={() => handleDeleteReport(selectedReport.id)}
                    className="px-4 py-2.5 bg-gray-800 text-white rounded-xl hover:bg-gray-900 transition-all shadow-md hover:shadow-lg flex items-center justify-center gap-2 font-semibold"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                    Delete
                  </button>
                )}
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6">
              {/* Summary Stats */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="bg-blue-50 rounded-xl p-4">
                  <div className="text-sm text-blue-600 mb-1">Customers</div>
                  <div className="text-2xl font-bold text-blue-900">{selectedReport.summary?.totalCustomers || 0}</div>
                </div>
                <div className="bg-red-50 rounded-xl p-4">
                  <div className="text-sm text-red-600 mb-1">Total Credit (Owed)</div>
                  <div className="text-2xl font-bold text-red-900">{formatCurrency(selectedReport.summary?.totalCredit || 0)}</div>
                </div>
                <div className="bg-green-50 rounded-xl p-4">
                  <div className="text-sm text-green-600 mb-1">Total Debit (Paid)</div>
                  <div className="text-2xl font-bold text-green-900">{formatCurrency(selectedReport.summary?.totalDebit || 0)}</div>
                </div>
                <div className="bg-purple-50 rounded-xl p-4">
                  <div className="text-sm text-purple-600 mb-1">Balance</div>
                  <div className="text-2xl font-bold text-purple-900">{formatCurrency(selectedReport.summary?.totalBalance || 0)}</div>
                </div>
              </div>

              {/* Top Customers */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-3">Top Customers</h3>
                <div className="space-y-2">
                  {selectedReport.topCustomers?.map((customer, idx) => (
                    <div key={idx} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-bold">
                          {idx + 1}
                        </div>
                        <div>
                          <div className="font-medium text-gray-900">{customer.name}</div>
                          <div className="text-xs text-gray-500">{customer.customerId}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-semibold text-blue-600">{formatCurrency(customer.balance)}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Village Stats */}
              {selectedReport.villageStats && Object.keys(selectedReport.villageStats).length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Village Statistics</h3>
                  <div className="space-y-2">
                    {Object.entries(selectedReport.villageStats).map(([village, stats]) => (
                      <div key={village} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div>
                          <div className="font-medium text-gray-900">{village}</div>
                          <div className="text-xs text-gray-500">{stats.customerCount} customers</div>
                        </div>
                        <div className="text-right">
                          <div className="font-semibold text-gray-900">{formatCurrency(stats.totalBalance)}</div>
                          <div className="text-xs text-gray-500">Balance</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
